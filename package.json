{
  "bugs": {
    "url": "https://github.com/vigetlabs/gulp-starter/issues"
  },
  "dependencies": {
    "babel-core": "6.7.2",
    "babel-loader": "6.2.4",
    "babel-preset-es2015": "6.6.0",
    "babel-preset-stage-1": "6.5.0",
    "browser-sync": "2.11.1",
    "chai": "3.5.0",
    "compression": "1.6.1",
    "del": "2.2.0",
    "express": "4.13.4",
    "gulp": "3.9.1",
    "gulp-autoprefixer": "3.1.0",
    "gulp-changed": "1.3.0",
    "gulp-cssnano": "2.1.1",
    "gulp-data": "1.2.1",
    "gulp-gh-pages": "0.5.4",
    "gulp-htmlmin": "1.3.0",
    "gulp-iconfont": "6.0.0",
    "gulp-if": "2.0.0",
    "gulp-imagemin": "2.4.0",
    "gulp-jade": "^1.1.0",
    "gulp-notify": "2.2.0",
    "gulp-nunjucks-render": "2.0.0",
    "gulp-rename": "1.2.2",
    "gulp-rev": "7.0.0",
    "gulp-rev-napkin": "0.1.0",
    "gulp-rev-replace": "0.4.3",
    "gulp-sass": "2.2.0",
    "gulp-sequence": "0.4.5",
    "gulp-sizereport": "1.1.3",
    "gulp-sourcemaps": "1.6.0",
    "gulp-svgstore": "6.0.0",
    "gulp-uglify": "1.5.3",
    "gulp-util": "3.0.7",
    "gulp-watch": "4.3.5",
    "jade": "^1.11.0",
    "karma": "0.13.22",
    "karma-chrome-launcher": "0.2.3",
    "karma-cli": "0.1.2",
    "karma-firefox-launcher": "0.1.7",
    "karma-mocha": "0.2.2",
    "karma-nyan-reporter": "0.2.4",
    "karma-sinon-chai": "1.2.0",
    "karma-webpack": "1.7.0",
    "lodash": "4.6.1",
    "lolex": "1.4.0",
    "mocha": "2.4.5",
    "morgan": "1.7.0",
    "normalize.css": "^4.0.0",
    "object-assign": "4.0.1",
    "open": "0.0.5",
    "pretty-hrtime": "1.0.2",
    "require-dir": "0.3.0",
    "sinon": "1.17.3",
    "sinon-chai": "2.8.0",
    "webpack": "1.12.14",
    "webpack-dev-middleware": "1.5.1",
    "webpack-hot-middleware": "2.10.0"
  },
  "description": "A full featured configurable gulp asset pipeline and static site builder",
  "devDependencies": {},
  "engines": {
    "node": ">=0.12.0 ~5.9.0",
    "npm": ">=2.14.12 ~3.7.3"
  },
  "gitHead": "5c50d5d363e8a3c7d63a203cdc2d5c3c454bfe35",
  "homepage": "http://code.viget.com/gulp-starter/",
  "license": "MIT",
  "name": "gulp-starter",
  "optionalDependencies": {},
  "readme": "# ![Gulp Starter](extras/demo/src/images/gulp-starter-logo.png)\n\n[![Build Status](https://travis-ci.org/vigetlabs/gulp-starter.svg?branch=static-server)](https://travis-ci.org/vigetlabs/gulp-starter)\n\nGulp Starter is a delicious blend of tasks and build tools poured into [Gulp](http://gulpjs.com/) to form a full-featured modern asset pipeline. It can be used as-is as a static site builder, or can be configured and integrated into your own development environment and site or app structure. The [extras](./extras) folder contains configuration details for Rails and Craft, with more to follow. [Check out the compiled demo](http://vigetlabs.github.io/gulp-starter/) and play with [the source files](extras/demo)!\n\n```bash\ngit clone https://github.com/vigetlabs/gulp-starter.git MyApp\ncd MyApp\nnpm install\nnpm start\n```\n\nFeatures | Tools Used\n------ | -----\n**CSS** | [Sass](http://sass-lang.com/) ([Libsass](http://sass-lang.com/libsass) via [node-sass](https://github.com/sass/node-sass)), [Autoprefixer](https://github.com/postcss/autoprefixer), [CSSNano](https://github.com/ben-eb/cssnano), Source Maps\n**JavaScript** | [Babel](http://babeljs.io/), [Webpack](http://webpack.github.io/)\n**HTML** | [Nunjucks](https://mozilla.github.io/nunjucks/), [gulp-data](https://github.com/colynb/gulp-data), or bring your own\n**Images** | Compression with [imagemin](https://www.npmjs.com/package/gulp-imagemin)\n**Icons** | Auto-generated [SVG Sprites](https://github.com/w0rm/gulp-svgstore) and/or [Icon Fonts](https://www.npmjs.com/package/gulp-iconfont)\n**Fonts** | Folder and `.sass` mixin for including WebFonts\n**Live Updating** | [BrowserSync](http://www.browsersync.io/), [Webpack Dev Middleware](https://github.com/webpack/webpack-dev-middleware), [Webpack Hot Middleware](https://github.com/glenjamin/webpack-hot-middleware)\n**Production Builds** | JS and CSS are [uglified](https://github.com/terinjokes/gulp-uglify) and [minified](http://cssnano.co/), [filename md5 hashing (reving)](https://github.com/sindresorhus/gulp-rev), [file size reporting](https://github.com/jaysalvat/gulp-sizereport), local production [Express](http://expressjs.com/) server for testing builds.\n**JS Testing** | [Karma](http://karma-runner.github.io/0.12/index.html), [Mocha](http://mochajs.org/), [Chai](http://chaijs.com/), and [Sinon](http://sinonjs.org/), Example [Travis CI](https://travis-ci.org/) integration\n**Deployment** | Quickly deploy `public` folder to gh-pages with [`gulp-gh-pages`](https://github.com/shinnn/gulp-gh-pages)\n\n## Usage\nMake sure Node installed. I recommend using [NVM](https://github.com/creationix/nvm) to manage versions. \n\nThis has been tested on Node `0.12.x` - `5.9.0`, and should work on newer versions as well. [File an issue](https://github.com/vigetlabs/gulp-starter/issues) if it doesn't!\n\n#### Install Dependencies\n```bash\nnpm install\n```\n\n#### Run devlopment tasks:\n```\nnpm start\n```\nAliases: `npm run gulp`, `npm run development`\n\nThis is where the magic happens. The perfect front-end workflow. This runs the default gulp task, which starts compiling, watching, and live updating all our files as we change them. BrowserSync will start a server on port 3000, or do whatever you've configured it to do. You'll be able to see live changes in all connected browsers. Don't forget about the additional BrowserSync tools available on port 3001!\n\nWhy run this as an npm script? NPM scripts add ./node_modules/bin to the path when run, using the packages version installed with this project, rather than a globally installed ones. Never `npm install -g` and get into mis-matched version issues again. These scripts are defined in the `scripts` property of `package.json`.\n\n#### Run in tests in watch mode:\n```bash\nnpm run test:watch\n```\n\n#### Run tests once:\n```bash\nnpm run test\n```\n\n#### Build production files:\n```bash\nnpm run production\n```\n\n### Running the Demo\nBy default, the files in `src` are pretty minimal. If you're just exploring and would like to play with the [demo](http://vigetlabs.github.io/gulp-starter/) files, the files available in `extras/demo`. Just replace `src` and `config.json` with the ones in `extras/demo`, or simply check out the `demo` branch.\n\n```\ngit checkout demo\nnpm start\n```\n\n### Starting a fresh project\nIf you plan on using this to start a new project, be sure and clear out the `git` data start a fresh history:\n\n```bash\nrm -rf .git && git init\ngit commit -m \"Initialized with Gulp Starter\"\n```\n\n## Configuration\nDirectory and top level settings are convienently exposed in `gulpfile.js/config.json`. Use this file to update paths to match the directory structure of your project, and to adjust task options.\n\nAll task configuration objects have `src` and `dest` directories specfied. These are relative to `root.src` and `root.dest` respectively. Each configuration also has an extensions array. This is used for file watching, and file deleting/replacing.\n\n**If there is a feature you do not wish to use on your project, simply delete the configuration, and the task will be skipped.**\n\nNot all configuration is exposed here. For advanced task configuration, you can always edit the tasks themselves in `gulpfile.js/tasks`.\n\n### Start compiling, serving, and watching files\n```\nnpm run gulp\n```\n\n(or `npm run development`)\n\nThis runs `gulp` from `./node_modules/bin`, using the version installed with this project, rather than a globally installed instance. All commands in the package.json `scripts` work this way. The `gulp` command runs the `default` task, defined in `gulpfile.js/tasks/default.js`.\n\nAll files will compile in development mode (uncompressed with source maps). [BrowserSync](http://www.browsersync.io/) will serve up files to `localhost:3000` and will stream live changes to the code and assets to all connected browsers. Don't forget about the additional BrowserSync tools available on `localhost:3001`!\n\nTo run any other existing task, simply add the task name after the `gulp` command. Example:\n\n```bash\nnpm run gulp production\n```\n\n## Asset Task Details\nA `README.md` with details about each asset task are available in their respective folders in the `src` directory:\n\n- [JavaScript](src/javascripts)\n- [Stylesheets](src/stylesheets)\n- [HTML](src/html)\n- [Fonts](src/fonts)\n- [Images](src/images)\n- [Icon Font](src/icons#iconfont-task)\n- [SVG Sprite](src/icons#svg-sprite-task)\n- [Static Files (favicons, app icons, etc.)](src/static)\n\n## Additional Task Details\n\n### Build production-ready files\n```\nnpm run production\n```\n\nThis will compile revisioned and compressed files to `./public`. To build production files and preview them localy, run\n\n```\nnpm run demo\n```\n\nThis will start a static server that serves your production files to http://localhost:5000. This is primarily meant as a way to preview your production build locally, not necessarily for use as a live production server.\n\n### Run JavaScript Tests\n```\nnpm run test\n```\nTest files located in `__tests__` folders are picked up and run using\n[Karma](http://karma-runner.github.io/0.12/index.html), [Mocha](http://mochajs.org/), [Chai](http://chaijs.com/), and [Sinon](http://sinonjs.org/). The test script right now first compiles a production build, and then, if successful runs Karma. This is nice when using something like [Travis CI](https://travis-ci.org/vigetlabs/gulp-starter) in that if an error occurs during the build step, Travis alerts me that it failed. To pass, the files have to compile properly AND pass the JS tests.\n\n### Deploy to gh-pages\n```\nnpm run deploy\n```\nThis task compiles production code and then uses [gulp-gh-pages](https://github.com/shinnn/gulp-gh-pages) to push the contents of your `dest.root` to a `gh-pages` (or other specified) branch, viewable at http://[your-username].github.io/[your-repo-name]. Be sure to update the `homepage` property in your `package.json`.\n\nGitHub Pages isn't the most robust of hosting solutions (you'll eventually run into relative path issues), but it's a great place to quickly share in-progress work, and you get it for free.\n\n[Surge.sh](http://surge.sh/) might be a good alternative for production-ready static hosting to check out, and is just as easy to deploy to. Where ever you're deploying to, all you need to do is `npm run gulp production` and transfer the contents of the `public` folder to your server however you see fit.\n\nFor non-static sites (Rails, Craft, etc.), make sure the `production` task runs as part of your deploy process.\n\n## Notable changes from 1.0\n- Full asset pipeline and static html compilation\n- `gulpfile.js` is now a directory\n- update directory structure\n- Replaced Browserify with [Webpack](http://webpack.github.io/docs/webpack-for-browserify-users.html)!\n  - Async CommonJS module requires\n  - Automatically splits out shared dependencies\n- New `html` task w/ Nunjucks templating/compiling\n- Replace CoffeeScript with ES6 ([Babel.js](http://babeljs.io/))\n- New `server` task to test production files locally\n- New `deploy` task to deploy the public directory to gh-pages\n- New `rev` task that revisions filenames and compress css and js\n- Use `gulp-watch` instead of `gulp.watch` (correctly handles new files)\n- New `production` task runs tests, compression + filename revisioning\n- Remove old examples and extraneous dependencies\n- Upgrades dependencies\n- Added example Travis CI integration that runs karma tests and production build\n- Add SVG sprite implementation from @synapticism in #100\n\nOriginal Blog Post: https://www.viget.com/articles/gulp-browserify-starter-faq\n\n***\n\n<a href=\"http://code.viget.com\">\n  <img src=\"http://code.viget.com/github-banner.png\" alt=\"Code At Viget\">\n</a>\n\nVisit [code.viget.com](http://code.viget.com) to see more projects from [Viget.](https://viget.com)\n",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "git://github.com/vigetlabs/gulp-starter.git"
  },
  "scripts": {
    "demo": "gulp production && gulp server",
    "deploy": "gulp deploy",
    "development": "gulp",
    "gulp": "gulp",
    "production": "gulp production",
    "start": "gulp",
    "test": "gulp production && karma start --single-run",
    "test:gulp": "mocha ./gulpfile.js/**/*.test.js",
    "test:watch": "karma start"
  },
  "version": "3.1.0",
  "warnings": [
    {
      "code": "ENOTSUP",
      "pkgid": "gulp-starter@3.1.0",
      "required": {
        "node": ">=0.12.0 ~5.9.0",
        "npm": ">=2.14.12 ~3.7.3"
      }
    }
  ]
}
